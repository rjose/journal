QPlan Core Filters
==================
Rino Jose <@rjose>

Sep 3, 2013
-----------
I want to be able to compile Haskell code on my tower. I guess the best way to
do this is to install the ghc platform. Let's start with "yum install ghc". I
may need cabal as well. OK, it looks like this is installed. Let's see if we can
get cabal going. Let's install cabal next. Alright, I got cabal installed. I
also got the qplan filter to build and run. Awesome!

Let's document the SkillAmount file and then write a simple filter that outputs
a list of the tracks and then the work items with name and skills required.
We'll also need to add tests for SkillAmount. Done!

Alright, I think we can head into Work now and try to parse out each line.

Sep 4, 2013
-----------
For today, let's gcat the planning spreadsheet into a file and then get it
into a form that the qplan filter will understand (i.e., stacked stream with a
"Work" header and data in the expected format). The fields are:

        id, name, estimate, triage, track, team, value, prereqs

Let's write a python filter that takes the raw work output from the q3
spreadsheet into one with a Work header. We'll call this q3_to_qplan.py. This
script should convert a "Raw Work" stream into a "Work" stream. Alright, now
that we have the work stream, let's pipe it into qplan and have it parse the
work items, group by track, and then print something out. Done!

Alright, I want to clean up the code so I don't have to qualify everything. I
may need to clean it up some more after this, but let's try this first.
Actually, let's see if we can emit some JSON first. The clean up stuff I can
do at home. OK, here's how you create JSON:

        let x = [("work", name work), ("track", track work)]
        encode x -- This encodes the argument literally
        encode $ toJSObject x -- This encodes the above as a JSON object 

Let's start refactoring by renaming fromString. I may need to redo all of this
when I find a more Haskell-y way of doing this. Done.

Now, let's document Work.hs.

After this, we'll move the filters to their own files. Each filter strategy
should be in its own file, I think. Common code should be moved into a common
file. Done!

Sep 5, 2013
-----------
Alright, what I want to do next is make sure the sample filter works with the
standard work stream. I'll do this:

        cat _q3mobile.txt | q3mobile_to_qplan.py | qplan

It works! So, what I want to do next is to go back up to the qplan app and
change the endpoint to point to something new. Then, I'll figure the data we
need to upload. The goal is to simplify the work that the server needs to do.
The main qplan filter needs to provide data in a form that doesn't require
much computation.

We'll also need to bring the staff data over at some point, but for now, let's
just work with the Work data. We'll mock out anything we don't have and circle
back to this. Alright, I hooked up the route. Let's start mocking stuff out
and then working backwards. OK, I was able to mock up some data. Let's see how
we handle selecting different triage values next. That will help us pick a way
to organize the data. Alright, I'm done! Here's what we'll need to do:

        - [X] Create list of all tracks
        - [X] Create list of work items by track
        - Create list of staff by track and skill
        - Create staffing stats by track and triage

Let's try getting something put together in Haskell with just work data and
then bring in the staff data. For the cases where we want all combinations, we
should try using lists as monads.

Let's look at getting a list of work items by track. The original work list
should go into "All". For the rest, we should be able to use our track list to
generate a nondeterministic result. Wait a minute. We already have work by
track. We just need to sort the items and add the original work list. Done.

Now, we need to convert this into a JSON object. We need to store the
following fields: estimate, feasible, name, rank, track, triage

One thought I just had was that we shouldn't really sort things until the end
(or until we need them).

TODO: Figure out where to document Work header/format
TODO: Check that we can handle "Raw Work" stream by default
TODO: Also rework the qplan app in a more proper form

Sep 6, 2013
-----------
Let's start simple by making estimates into a better Show instance. After that,
we'll add the staff and net availability calculations to the QPlan filter. We
should also add the weeks left to the python script and send that as a stream.
Once this works, we should hook it up to the qplan app. Once that works, we
should merge everything down into v6_branch and clean up any dead files.

Alright, let's start with Estimate. Done! Alright, the next thing we should do
is add the staff computation. We need to break staff up by track (including
All) and compute skill supply assuming a certain number of weeks. We need to
break staff up by track and skill.

OK, after much mental effort, I've been able to split staff by skill and
track. Before we can proceed, let's condition the work tracks a bit better and
also add the "All" staff set. Done! OK, since we're so close, let's set up to
return the staff lists. To do this, we'll write a function to convert a person
into a JSON value. Done! Let's check this in and then move to the staff stat
computation.

Alright, let's do some staff computation next. We need to do a couple of
things here. Here's what we need to do:

        - [X] Compute available staff by track and skill
        - [X] Compute available manpower by track and skill
        - [X] Compute net availability by work items in track
        - Compute skill demand and net avail by track and triage

To compute the net availability, we should do a foldl over the work items
using the available supply for that track. The result will be a list of
feasbile flags for each work item if any of the demanded work is negative. We
should be able to zip the work items against the available manpower to
generate this.

Alright, the last step is to compute the net demand and net avail by track and
triage.


TODO: Need to condition tracks from the work spreadsheet a little better
TODO: Go to camelcase for Haskell
TODO: Use a convention for using "'" for naming
TODO: Sort staff before returning
TODO: Come up with strategy for record accessors
